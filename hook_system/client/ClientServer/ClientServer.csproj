<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>netcoreapp2.2</TargetFramework>
        <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
        <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <ScrubRoot>scrubbing\</ScrubRoot>
        <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

        <!-- Set this to true if you enable server-side prerendering -->
        <BuildServerSideRenderer>false</BuildServerSideRenderer>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.App" />
        <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="2.2.0" />
        <PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.2.0" PrivateAssets="All" />
        <PackageReference Include="Microsoft.IdentityModel.Tokens" Version="5.4.0" />
        <PackageReference Include="Newtonsoft.Json" Version="13.0.2" />
        <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="2.1.2" />
        <PackageReference Include="SharpCompress" Version="0.23.0" />
        <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="5.4.0" />
    </ItemGroup>

    <ItemGroup>
        <Watch Include="**\*.scss" />
        <Watch Include="**\*component.ts" />
        <Watch Include="**\*.component.html" />

    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**" />
        <Content Include="ClientApp\src\app\app.routing.ts" />
        <Content Include="ClientApp\src\app\auth.guard.ts" />
        <Content Include="ClientApp\src\app\login\login.component.css" />
        <Content Include="ClientApp\src\app\login\login.component.html" />
        <Content Include="ClientApp\src\app\login\login.component.spec.ts" />
        <Content Include="ClientApp\src\app\login\login.component.ts" />
        <Content Include="ClientApp\src\app\login\login.module.spec.ts" />
        <Content Include="ClientApp\src\app\login\login.module.ts" />
        <Content Include="ClientApp\src\app\shared\services\base.service.spec.ts" />
        <Content Include="ClientApp\src\app\shared\services\base.service.ts" />
        <Content Include="ClientApp\src\app\shared\services\user.service.spec.ts" />
        <Content Include="ClientApp\src\app\shared\services\user.service.ts" />
        <None Remove="$(SpaRoot)**" />
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
    </ItemGroup>

    <ItemGroup>
        <Content Include="$(ScrubRoot)**" Exclude="${ScrubRoot}env\**" />
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
            <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>%(DistFiles.Identity)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>

    <Target Name="PublishSetupVirtualenv" AfterTargets="ComputeFilesToPublish">
        <Exec WorkingDirectory="$(ScrubRoot)" Command="./$(ScrubRoot)setup.sh"  Condition=" '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' "/>
        <Exec WorkingDirectory="$(ScrubRoot)" Command="setup"  Condition=" '$(OS)' == 'Windows_NT' "/>
        <ItemGroup>
            <DistFiles Include="$(ScrubRoot)env\**; $(ScrubRoot)scrub.py" />
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>%(DistFiles.Identity)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>

</Project>
